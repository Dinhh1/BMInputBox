{
  "name": "BMInputBox",
  "tagline": "iOS drop-in class that displays input boxes for the user to input different kinds of data.",
  "body": "# BMInputBox\r\n\r\nBMInputBox is an iOS drop-in class wrote in Swift that displays input boxes for the user to input different kinds of data, for instance username and password, email address, numbers, plain text. BMInputBox is meant as a replacement for the limited UIAlertView input options.\r\n\r\n![alt tag](http://blackmirror.media/wp-content/uploads/2016/04/BMInputBoxPlainText.png)\r\n![alt tag](http://blackmirror.media/wp-content/uploads/2016/04/BMInputBoxLogin.png)\r\n![alt tag](http://blackmirror.media/wp-content/uploads/2016/04/BMInputBoxLoginFilled.png)\r\n\r\n## Requirements\r\n\r\nBuilt in Swift 2 for iOS 8.0+. All devices supported. BMInputBox can be used in both Swift and in ObjectiveC projects. You will need Xcode 7 for version 1.2.x and above.\r\n\r\nFor older projects using Swift 1.2, use version 1.1.3.\r\n\r\n## Adding BMInputBox To Your Project\r\n\r\n### CocoaPods\r\n\r\nCocoaPods is the recommended way to add BMInputBox to your project. As BMInputBox is written in Swift, you need to add the `use_frameworks!` option to your podfile.\r\n\r\n```\r\npod 'BMInputBox'\r\n```\r\n\r\n## Usage\r\n\r\nImport the module to your project.\r\n\r\n```Swift\r\nimport BMInputBox\r\n```\r\n\r\n### Creating an input box\r\n\r\n```Swift\r\nlet inputBox = BMInputBox.boxWithStyle(.NumberInput)\r\ninputBox.show()\r\n```\r\n\r\nAvailable styles:\r\n* `.PlainTextInput` - Simple text field\r\n* `.NumberInput` - Text field accepting numbers only - numeric keyboard\r\n* `.PhoneNumberInput` - Text field accepting numbers only - phone keyboard\r\n* `.EmailInput` - Text field accepting email addresses -  email keyboard\r\n* `.SecureTextInput` - Secure text field for passwords\r\n* `.LoginAndPasswordInput` - Two text fields for user and password entry\r\n\r\n### Customising the box\r\n\r\n#### Blur Effect\r\n\r\nUIBlurEffectStyle: .ExtraLight, .Light, .Dark\r\n\r\n```Swift\r\ninputBox.blurEffectStyle = .Light\r\n```\r\n\r\n#### Title And Message.\r\n\r\n```Swift\r\ninputBox.title = \"This is the title\"\r\ninputBox.message = \"This is a longer messages that can be wrapped into multiple lines but maximum three.\"\r\n```\r\n\r\n#### Mandatory Decimals\r\n\r\nFor the .NumberInput type. Default is 0. If set, the user input will be convertd to Double with 2 decimals. For instance \"1\" becomes \"0.01\" and \"1234\" becomes \"12.34\".\r\n\r\n```Swift\r\ninputBox.numberOfDecimals = 2\r\n```\r\n\r\n#### Going Crazy\r\n\r\nDoing whatever you need with the textField in the box.\r\n\r\n```Swift\r\ninputBox.customiseInputElement = {(element: UITextField) in\r\n  element.placeholder = \"Custom placeholder\"\r\n  if element.secureTextEntry == true {\r\n    element.placeholder = \"Secure placeholder\"\r\n  }\r\n  return element\r\n}\r\n```\r\n\r\n### Validation\r\n\r\n#### Minimum And Maximum Values\r\nSetting minimum and maximum values for the .NumberInput type. Shows a message to the user below the textField. The entered value is validated against these values.\r\n\r\nSetting a minimum value:\r\n\r\n```Swift\r\ninputBox.minimumValue = 10\r\ninputBox.validationLabelText = \"A number greater %@.\"\r\n```\r\n\r\nSetting minimum and maximum values:\r\n\r\n```Swift\r\ninputBox.minimumValue = 10\r\ninputBox.maximumValue = 30\r\ninputBox.validationLabelText = \"A number between %@ and %@.\"\r\n```\r\n\r\n#### Text Length\r\nSetting minimum and maximum lenght of the entered text. If the values are the same, it will check for an exact length.\r\n\r\n```Swift\r\ninputBox.minimumLenght = 4\r\ninputBox.maximumLength = 6\r\ninputBox.validationLabelText = \"A text between %i and %i characters.\"\r\n```\r\n\r\n### Closures for submission, cancellation and change\r\n\r\n#### Submit\r\n\r\n```Swift\r\ninputBox.onSubmit = {(value: AnyObject...) in\r\n  for text in value {\r\n    if text is String {\r\n      NSLog(\"%@\", text as String)\r\n    }\r\n    else if text is NSDate {\r\n      NSLog(\"%@\", text as NSDate)\r\n    }\r\n    else if text is Int {\r\n      NSLog(\"%i\", text as Int)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Cancel\r\n\r\n```Swift\r\ninputBox.onCancel = {\r\n  NSLog(\"Cancelled\")\r\n}\r\n```\r\n\r\nTuples in Objective C are not supported, therefore, you have to use the `onSubmitObjc` closure if your project is in Objective C. This returns an array with the values of the Input Box.\r\n\r\n```Swift\r\ninputBox.onSubmitObjc = {(values: [AnyObject]) in\r\n  for text in values {\r\n    if text is String {\r\n      NSLog(\"%@\", text as String)\r\n    }\r\n    else if text is NSDate {\r\n      NSLog(\"%@\", text as NSDate)\r\n    }\r\n    else if text is Int {\r\n      NSLog(\"%i\", text as Int)\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Change\r\n\r\nYou can interact with the text as it is being entered. The closure is tied to the `.EditingChanged` event of the UITextField.\r\n\r\n```Swift\r\ninputBox.onChange = {(value: String) in\r\n  return value.uppercaseString\r\n}\r\n```\r\n",
  "google": "UA-59696125-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}